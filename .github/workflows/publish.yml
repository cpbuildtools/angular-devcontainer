name: Publish
on:
  push:
    branches:
      - "release/v*"

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get package version
        id: package_version_str
        uses: martinbeentjes/npm-get-version-action@master

      - name: Check if tag exists for version '${{ steps.package_version_str.outputs.current-version }}'
        uses: mukunku/tag-exists-action@v1.0.0
        id: checkTag
        with:
          tag: "v${{ steps.package_version_str.outputs.current-version }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Exit if tag exists
        if: ${{ steps.checkTag.outputs.exists == 'true' }}
        run: exit 1

      - name: Parse package version
        id: version
        uses: doptools/action-parse-semver@main
        with:
          version: "${{ steps.package_version_str.outputs.current-version }}"
          versionRegex: "(.*)"

      - name: Build image
        run: docker build . --file Dockerfile --tag ${{ github.event.repository.name }}

      - name: Create image id
        run: echo "IMAGE_ID=docker.pkg.github.com/${{github.repository}}/${{ github.event.repository.name }}" >> $GITHUB_ENV

      - name: Add release tags for '${{steps.version.outputs.full}}'
        if: ${{steps.version.outputs.isPrerelease != true && steps.version.outputs.major != 0}}
        run: |
          docker tag ${{ github.event.repository.name }} $IMAGE_ID:latest
          docker tag ${{ github.event.repository.name }} $IMAGE_ID:${{steps.version.outputs.full}}
          docker tag ${{ github.event.repository.name }} $IMAGE_ID:${{steps.version.outputs.major}}

      - name: Add pre-release tags for '${{steps.version.outputs.full}}'
        if: ${{steps.version.outputs.isPrerelease == true || steps.version.outputs.major == 0}}
        run: |
          docker tag ${{ github.event.repository.name }} $IMAGE_ID:next
          docker tag ${{ github.event.repository.name }} $IMAGE_ID:${{steps.version.outputs.full}}
          docker tag ${{ github.event.repository.name }} $IMAGE_ID:${{steps.version.outputs.major}}.${{steps.version.outputs.minor}}.${{steps.version.outputs.patch}}-${{steps.version.outputs.prerelease}}

      - name: Log into registry
        run: echo "${{ github.token }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
#
#    - name: Push image
#      run: |
#        IMAGE_ID=docker.pkg.github.com/$IMAGE_OWNER/$IMAGE_REPO/$IMAGE_NAME
#
#        # Change all uppercase to lowercase
#        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
#
#        docker tag $IMAGE_NAME $IMAGE_ID:${{steps.version.outputs.full}}
#        docker push $IMAGE_ID:${{steps.version.outputs.full}}
#
#        docker tag $IMAGE_NAME $IMAGE_ID:latest
#        docker push $IMAGE_ID:latest
#
#    - name: Create Release
#      id: create_release
#      uses: actions/create-release@v1
#      env:
#        GITHUB_TOKEN: ${{ github.token }}
#      with:
#        tag_name: ${{ github.ref }}
#        release_name: Release ${{ github.ref }}
#        body: |
#          Generated Release ${{ github.ref }}
#        draft: false
#        prerelease: ${{ steps.version.outputs.isPrerelease }}
#
